#!/bin/zsh

[ $# -ne 1 ] && echo "missing destination parameter" && exit 1

export DESTINATION="$1"



# make sure dependencies are installed
for app in jq gomplate fzf; do
  command -v $app > /dev/null || { echo "$app must be installed" && exit 1 }
done


TEMPLATE_ROOT="$XDG_CONFIG_HOME/snip"


# init directories
if [ ! -d "$TEMPLATE_ROOT" ]; then
  mkdir -p $TEMPLATE_ROOT
fi




export SNIPPET="`find "$TEMPLATE_ROOT"/* -type f -not -name "*.json" -exec realpath --relative-to "$TEMPLATE_ROOT" {} \; | fzf`"
export DATASOURCE="$SNIPPET"

# require valid snippet
[ -z "$SNIPPET" ] && exit 0



assign(){
  [ $# -ne 2 ] && echo "assign: expected 2 arguments, but got $#" && exit 1
  local varName="$1"
  local value="$2"
  eval "unset $varName"

  # dark HEREDOC magic to assign multi-line value to variable
  eval 'read -d "" '"$varName"' <<EOF
'"$value"'
EOF'
  eval "export $varName"
  # eval "echo $varName \$$varName"
}

load-data(){
  [ $# -ne 1 ] && echo "load-data: expected 1 argument, but got $#" && exit 1
  local dataSource="$TEMPLATE_ROOT/$1.json"

  if [ -f "$dataSource" ]; then
    cat "$dataSource"
  fi
}

edit(){
  [ $# -ne 1 ] && echo "edit: expected 1 argument, but got $#" && exit 1
  local data="$1"
  local outputVar="$2"

  echo "$data" | vipe
}

merge(){
  [ $# -ne 2 ] && echo "merge: expected 2 arguments, but got $#" && exit 1
  local data1="$1"
  local data2="$2"

  echo "$data1" | jq ". + $data2"
}

set-value(){
  [ $# -ne 3 ] && echo "set-value: expected 3 arguments, but got $#" && exit 1
  local data="$1"
  local key="$2"
  local value="$3"

  merge "$data" "{\"$key\":\"$value\"}"
}

render(){
  [ $# -lt 1 ] && echo "render: expected 1-2 arguments, but got $#" && exit 1
  local snippet="$TEMPLATE_ROOT/$1"
  local data="$2"

  if [ -n "$data" ]; then
    j2 --undefined --format=json "$snippet" <(echo "$data")
  else
    j2 --undefined "$snippet"
  fi
}


case "${SNIPPET:e}" in
  recipe)
    export DATA="`load-data "$DATASOURCE"`"

    (source "$TEMPLATE_ROOT/$SNIPPET")
    ;;
  *)
    [ -d "$DESTINATION" ] && echo "destination \"$DESTINATION\" cannot be a directory" && exit 1

    local data="`load-data "$DATASOURCE"`"

    if [ -n "$data" ]; then
      data="`edit "$data"`"
    fi

    result="`render "$SNIPPET" "$data"`"

    echo "$result" > "$DESTINATION"
    ;;
esac

