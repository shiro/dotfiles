# bind-key b copy-mode\;\
#            send-keys -X start-of-line\;\
#            send-keys -X search-backward "兎"

is_sh="ps -o state= -o comm= -t '#{pane_tty}' | tail -n1 \
	| grep -iqE '^[^ ]+ +(sh|bash|zsh|fish)$'"

# bind-key u if-shell "$is_sh" "display \"wow\"" "display \"nyan\""
# bind-key u run-shell "ps -o state= -o comm= -t #{pane_tty} | tail -n1"

# options {{{

# Enviormental variables
# set-option -ga update-environment ' CYGWIN'
set-option -g default-shell /bin/zsh

# use Ctrl-a for tmux commands
unbind C-b
set -g prefix C-a

# Reduce command delay
set -sg escape-time 0

# Window numbering should start at 1
set -g base-index 1

# Same for panes
setw -g pane-base-index 1

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# propagate focus events
set -g focus-events on

# use xsel for copy
set -s copy-command 'xsel -i'

# use vi keys in copy mode
setw -g mode-keys vi
bind -T copy-mode-vi y send -X copy-pipe 'xsel'
bind -T copy-mode-vi Escape send-keys -X clear-selection
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi r send-keys -X rectangle-toggle

# enable 256 color display
set -g default-terminal "xterm-256color"
#set -g default-terminal "alacritty"
#set-option -sa terminal-overrides ",xterm*:Tc" # true color support
set -as terminal-features "xterm-256color*:RGB:extkeys"
set -s extended-keys on
#set -as terminal-features ",xterm-256color*:Tc"

# disable visual notifications
set -g visual-activity off

# disable bell notifications
set -g bell-action none

# disable window activity notifications
set -g monitor-activity off

# refresh status bar info every N seconds
set -g status-interval 1

# center window list
set -g status-justify centre

# enable mouse actions
set-option -g mouse on

# }}}

# mappings {{{

# easy reloading of config file
bind R source-file ~/.tmux.conf \; display "reloaded"
bind -n M-R source-file ~/.tmux.conf \; display "reloaded"

# toggle all keys (for nested sessions)
bind t if -F '#{s/empty//:key-table}' 'set key-table empty' 'set -u key-table'

# synchronize panes (send input to all)
bind e setw synchronize-panes

# use vim movements to switch between panes
bind -n ä display-panes

# smart pane switching with awareness of Vim splits.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
	| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"

bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key i select-pane -l
bind-key -n M-i select-pane -l
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi M-\\ select-pane -l
bind-key -T copy-mode-vi Left previous-window
bind-key -T copy-mode-vi Right next-window

bind-key -n š break-pane
bind-key -n Š join-pane -t:!

# split panes
bind -n M-\\ split-window -h -c "#{pane_current_path}"
bind -n M-] split-window -v -c "#{pane_current_path}"

# resize panes
bind -n M-H resize-pane -L 3
bind -n M-J resize-pane -D 3
bind -n M-K resize-pane -U 3
bind -n M-L resize-pane -R 3
bind -n ž resize-pane -Z

# kill panes
bind -n M-q kill-pane
bind -n ö kill-pane -a

# swap panes
bind -n M-[ swap-pane -U
bind -n M-"'" swap-pane -D

# toggle status bar
bind b set status

# rename current session to time
bind m run-shell "~/bin/rename-tmux-time"

# }}}

# windows {{{

# swap windows
bind-key -n M-, swap-window -t -1 \; previous-window
bind-key -n M-. swap-window -t +1 \; next-window
bind-key , swap-window -t -1 \; previous-window
bind-key . swap-window -t +1 \; next-window

# go to next/previous window
bind-key -n M-Left previous-window
bind-key -n M-Right next-window
# bind -n M-f find-window

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind -n M-w kill-window
bind -n Ö kill-window -a # kill all but current
bind -n M-r new-window -c "#{pane_current_path}"

bind -n M-/ command-prompt -I "" "rename-window '%%'" # rename window

bind -n M-b copy-mode

bind-key C-q confirm-before kill-server

# }}}

# theme {{{

# statusbar
set -g status-fg colour5
set -g status-bg default

set -g status-left-length 40
set -g status-left ""

set -g status-right-length 40
set -g status-right ""

set -g status-justify left

# window tabs
set -g window-status-format " #W "
set -g window-status-current-format " #W "

set -g status-style "bg=default"
# tabs
setw -g window-status-current-style fg=colour15
setw -g window-status-style fg=colour7
setw -g window-status-activity-style fg=colour5,bg=default
setw -g window-status-bell-style fg=colour5,bg=default,bold


# window border
set -g pane-active-border-style fg=colour15
set -g pane-border-style fg=colour15

# messages
set -g message-style fg='colour5',bg=default
set -g message-command-style fg='colour5',bg=default

# }}}

# plugins {{{

bind -n M-t source-file ~/.dotfiles/tmux/keysoff.conf

# }}}

# choose window/session
# bind-key "'" choose-window
# bind-key '"' choose-session

# Local config
# if-shell "[ -f ~/.tmux.conf.local ]" 'source ~/.tmux.conf.local'

# passthrough keys
bind-key -n C-Tab send "\e[27;5;9~"
bind-key -n C-S-Tab send "\e[27;6;9~"
bind-key -n C-S-F next-window #send "\e[70;5u"
bind-key -n C-S-P send "\e[80;5u"
bind-key -n C-S-R send "\e[82;5u"
